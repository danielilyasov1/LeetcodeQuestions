Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume 
all four edges of the grid are all surrounded by water.

example1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

example2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

solution:
/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function(grid) {
    let count = 0
    const rows= grid.length-1
    const cols= grid[0].length-1

    const dfs = (row_index,col_index) => {
        if ( row_index > rows || col_index > cols || row_index <0 || col_index <0) return

        const cell = grid[row_index][col_index]
        if (cell === '0') return
        grid[row_index][col_index] = '0'

        dfs(row_index-1,col_index) //go up
        dfs(row_index+1,col_index) //go down
        dfs(row_index,col_index+1) //go right
        dfs(row_index,col_index-1) //go left
    }

    grid.forEach((row,row_index)=>{
        row.forEach((col,col_index)=>{
            if(col==='1'){
                dfs(row_index,col_index)
                count++
            }
        })
    })
    return count
};
