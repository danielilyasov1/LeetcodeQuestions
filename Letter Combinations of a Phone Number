Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

example1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

example2:
Input: digits = ""
Output: []

example3:
Input: digits = "2"
Output: ["a","b","c"]

solution:
var letterCombinations = function(digits) {
    console.log(digits)
    let comb=[]
    if(digits==="") return ans
    const map={
        "2" : "abc",
        "3" : "def",
        "4" : "ghi",
        "5" : "jkl",
        "6" : "mno",
        "7" : "pqrs",
        "8" : "tuv",
        "9" : "wxyz"
    }

    let go = (i, str) => {
        if(i===digits.length){
            comb.push(str)
            return
        }

        for(let char of map[digits[i]]){
            go(i+1,str+char)
        }
    }

    go(0,"")
    return comb
