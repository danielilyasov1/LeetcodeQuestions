You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0)
and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

example1:

^
|
8-      |                        |
7-      | x    x    x    x    x  | x    x  |
6-      | x  | x    x    x    x  | x    x  |
5-      | x  | x    x  | x    x  | x    x  |
4-      | x  | x    x  | x  | x  | x    x  |
3-      | x  | x    x  | x  | x  | x  | x  |
2-      | x  | x  | x  | x  | x  | x  | x  |
1-  |   | x  | x  | x  | x  | x  | x  | x  |  
0-------------------------------------------

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the
max area of water (blue section) the container can contain is 49.

example2:
Input: height = [1,1]
Output: 1

solution:
/**
 * @param {number[]} height
 * @return {number}
 */
var maxArea = function(height) {
    if (height.length === 0 || height === null) return 0;

    let left = 0, right = height.length - 1;
    let maxArea = 0;

    while (left < right) {
        let minHeight = Math.min(height[left], height[right]);
        maxArea = Math.max(maxArea, minHeight * (right - left));

        if (height[left] < height[right]) {
            left++;
        } else {
            right--;
        }
    }

    return maxArea;
};
